------------------
r + geom_point(aes(size=BudgetMillions))
------------------
r + geom_point(aes(size=BudgetMillions))
#------------------
r + geom_point(aes(size=BudgetMillions))
r + geom_point(size=10)
r + geom_point(aes(size=10))
#---------------- histogram
s <- ggplot(data=df, aes(x=BudgetMillions))
s +geom_histogram()
s +geom_histogram(binwidth=10)
s + geom_histogram(aes(binwidth=10))
s + geom_histogram(binwidth=10)
s + geom_histogram(binwidth=10, color="Blue")
s + geom_histogram(binwidth=5, color="Blue")
s + geom_histogram(binwidth=5, color="Blue", size=5)
s + geom_histogram(binwidth=5, color="Blue")
# add color
s + geom_histogram(binwidth=5, fill = "Green, color="Blue")
# add color
s + geom_histogram(binwidth=5, fill = "Green", color="Blue")
s + geom_histogram(binwidth=5, aes(fill=Genre))
s + geom_histogram(binwidth=5, aes(fill=Genre), color="Black")
# sometimes you may need density charts
s + geom_density(aes(fill=Genre))
# sometimes you may need density charts
s + geom_density(aes(fill=Genre), position="Stack")
# sometimes you may need density charts
s + geom_density(aes(fill=Genre), position="stack")
s + geom_boxplot()
t + geom_histogram(binwidth=10,
fill="White", color="blue")
#------------------------- layer tips
t <- ggplot(data=df, aes(x=AudienceRating))
t + geom_histogram(binwidth=10,
fill="White", color="blue")
t <- ggplot(data=df)
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White", color="Blue")
t + geom_histogram(binwidth = 10,
aes(x=BudgetMillions),
fill="White", color="Blue")
t + geom_histogram(binwidth = 10,
aes(x=CriticRating),
fill="White", color="Blue")
t <- ggplot()
#-------------------------- statistical transformation
?geom_smooth()
u <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
color=Genre))
u +geom_point() + geom_smooth()
u +geom_point() + geom_smooth(fill =NA)
u <- ggplot(data=df, aes(x=Genre, y=AudienceRating),
color=Genre)
u+geom_boxplot()
u <- ggplot(data=df, aes(x=Genre, y=AudienceRating,
color=Genre))
u+geom_boxplot()
u + geom_boxplot(size=1,2)
u + geom_boxplot(size=1.2)
u + geom_boxplot(size=1.2)  + geom_point()
# tip
u + geom_boxplot(size=1.2) +geom_jitter()
# tip
u + geom_boxplot(size=1.2) + geom_jitter()
u + geom_jitter()+ geom_boxplot(size=1.2)
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.5)
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.7)
u <- ggplot(data=df, aes(x=Genre, y=CriticRating,
color=Genre))
u+geom_boxplot()
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.7)
#------------------------- Using Facets
v <- ggplot(data=df, aes(x=BudgetMillions))
v + geom_histogram(binwidth = 10,
aes(fill=Genre))
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black")
v + geom_histogram(binwidth = 10,
aes(fill=Genre))
, color="Black"
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid()
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~.)
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~. scales="fee")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~.,scales="fee")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~., scales="free")
#scatterplots:
w <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
color=Genre))
w + geom_point(size=3) + facet_grid(Genre~.)
w + geom_point(size=3) + facet_grid(.~Year)
w + geom_point(size=3) + facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smooth() + facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year)
m <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
size=BudgetMillions, color=Genre))
m + geom_point()
m +geom_point() + xlim(50,100)
m + geom_point()
m +geom_point() + xlim(50,100)
m + geom_point()
m +geom_point() + xlim(50,100)
m +geom_point() + xlim(50,100) + ylim(50,100)
m + geom_point() + xlim(50,100) + ylim(50,100)
# won't work well always
n <- ggplot(data=df, aes(x=BudgetMillions))
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black")
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black") +
ylim(0,50)
# instead zoom!
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black") +
coord_cartesian(ylim=c(0,50))
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year) + coord_cartesian(ylim=c(0,100))
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10
aes(fill=Genre), color="black")
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10
aes(fill=Genre), color="black")
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10,
aes(fill=Genre), color="black")
h <- o + geom_histogram(binwidth=10,
aes(fill=Genre), color="black")
# label
h + xlab("Hahah!")
# label
h + xlab("Hahah!") + ylab(kikiki)
# label
h + xlab("Hahah!") + ylab("kikiki")
# label format
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30))
# label format
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30))
# tick
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20))
# tick
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
?theme
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,0.5))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(0.8,0.5))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(0.8,0.5),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!")
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=20))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=2))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue"))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue", family="Overpass"))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue", family="Courier"))
setwd()
setwd()
getwd()
?rm
?rm(list=ls())
?rm(list=ls())
rm(list=ls())
df <- read_csv(file.choose())
df <- read.csv(file.choose())
df
View(df)
install.packages(updateR)
install.packages("updateR")
install.packages("installr")
install.packages("installr")
updateR()
library("installr")
library(stringr)
1
1+1
library("installr")
q()
library(installr)
install.packages("stringr")
install.packages("stringr")
getwd()
setwd("C:\\Users\\Min\\books\\R\\R_Start")
setwd("C:\\Users\\Min\\books")
setwd("C:\\Users\\Min\\books\\R_Start")
util <- read.csv("P3-Machine-Utilization.csv")
head(util, 12)
str(util)
summary(util)
util$Machine <- factor(util$Machine)
##----------- column for utilisation
util$Utilisation <- 1 - util$Percent.Idle
head(util,10)
tail(util,10)
#----- data
?POSIXct  # just standards between computeres, not just time but everything
head(util,10)
util$PosixTime <- as.POSIXct(util$Timestamp,format = "%d/%m/%Y %H:%M")
head(util,10)
summary(util)
# tip how to rearrange columns in a df
util$Timestamp <- NULL
head(util,10)
util <- util[,c(4,1,2,3)] ########## rearrange column order!!!
head(util,10)
# what is a list??
# can contain anything any type of data
summary(util)
RL1 <- util[util$Machine == "RL1",]
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
util_stats_rl1 <- c(min(RL1$Utilisation, na.rm=T),
mean(RL1$Utilisation, na.rm=T),
max(RL1$Utilisation, na.rm=T))
length(which(RL1$Utilisation < 0.9)) > 0
as.logical(length(which(RL1$Utilisation < 0.9))) # the same as one above
# gives indeice of True values
util_under_90_flag <- length(which(RL1$Utilisation < 0.9)) > 0
util_under_90_flag
list_rl1 <- list("RL1", util_stats_rl1, util_under_90_flag)
list_rl1
# ----------------- name of list
names(list_rl1)
names(list_rl1) <- c("Machine", "Stats", "LowThreshold")
list_rl1
#------------ give names directly ( like dataframe)
list_rl1 <- list(Machine ="RL1", Stats=util_stats_rl1, LowThreshold=util_under_90_flag)
summary(list_rl1)
list_rl1
list_rl1[1]
list_rl1[1][1]
list_rl1[[1]]
list_rl1[1]
list_rl1$Machine
list_rl1[2]
list_rl1$Machine
list_rl1[2]
list_rl1[2]
typeof(list_rl1[2])
list_rl1[[2]]
typeof(list_rl1[[2]]
)
typeof(list_rl1[[2]])
list_rl1[[2]]
typeof(list_rl1[2])
typeof(list_rl1[[2]])
list_rl1$Stats
typeof(list_rl1$Stats)  # double
# how would you access the 3rd element
list_rl1[2]
# how would you access the 3rd element
list_rl1[2][2]
# how would you access the 3rd element
list_rl1[2][1]
# how would you access the 3rd element
list_rl1[[2][1]
# how would you access the 3rd element
list_rl1[[2]]
# how would you access the 3rd element
list_rl1[[2]][2]
# how would you access the 3rd element
list_rl1[[2]][3]
list_rl1$Stats[3]
list_rl1[[3]]
# adding and deleting list components
list_rl1
list_rl1[4] <- "New Information"
list_rl1
# another way to add
RL1
# another way to add
RL1[is.na(RL1$Utilisation)]
# another way to add
RL1[is.na(RL1$Utilisation),]
# another way to add
RL1[is.na(RL1$Utilisation),"PosixTime"]
# another way to add
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilisation),"PosixTime"]
list_rl1
list_rl1[[6]]
list_rl1[7] <- "New Information"
list_rl1
list_rl1[7] <- NULL
list_rl1
list_rl1[6] <- NULL
list_rl1
# list_rl1[7] <- NULL
# list_rl1[6] <- NULL
list_rl1
# add anther component
list_rl1$Data <- RL1
list_rl1
summary(list_rl1)
str(list_rl1)
# subsetting alist
list_rl1
# subsetting alist
list_rl1[[4]]
# subsetting alist
list_rl1[[3]]
# subsetting alist
list_rl1[[5]]
# subsetting alist
list_rl1[[5]][1]
list_rl1$UnknownHours[1]
# subsetting alist
list_rl1
# subsetting alist
list_rl1[1]
# subsetting alist
list_rl1[1:2]
# subsetting alist
list_rl1[1:3]
# subsetting alist
list_rl1[c(1,4)]
# subsetting alist
list_rl1[c(1,5)]
# subsetting alist
list_rl1[1:3]
list_rl1[c("Machine")]
list_rl1[c("Machine", "Stats")]
sublist_rl1 <- list_rl1[c("Machine", "Stats")]
sublist_rl1
sublist_rl1[[2]][2]
library("ggplot2")
p <- ggplot(data=util)
p + geom_line(aes(x=PosixTime, y=Utilisation))
p + geom_line(aes(x=PosixTime, y=Utilisationm,
color=Machine))
p + geom_line(aes(x=PosixTime, y=Utilisationm,
color=Machine))
p + geom_line(aes(x=PosixTime, y=Utilisationm,
color=Machine))
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine))
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) # aes mappint variable
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) + facet_grid(Machine~.)
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) + facet_grid(Machine~.) +
geom_hline(yintercept=0.09)
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) + facet_grid(Machine~.) +
geom_hline(yintercept=0.9)
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) + facet_grid(Machine~.) +
geom_hline(yintercept=0.9, color="Gray", size=1.2)
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) + facet_grid(Machine~.) +
geom_hline(yintercept=0.9, color="Gray", size=1.2, linetpye=3)
p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) + facet_grid(Machine~.) +
geom_hline(yintercept=0.9, color="Gray", size=1.2, linetype=3)
# aes mappint variable
myplot <- p + geom_line(aes(x=PosixTime, y=Utilisation,
color=Machine), size=1.2) + facet_grid(Machine~.) +
geom_hline(yintercept=0.9, color="Gray", size=1.2, linetype=3)
list_rl1$Plot <- myplot
list_rl1
summary(list_rl1)
str(list_rl1)
install.packages("shiny")
library(shiny)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
