q + geom_point(size=1) + geom_line()
q + geom_point() + geom_line(size=1)
t
# ex3
q + geom_point(aes(x=BudgetMillions)) +
xlab("Budget")
#--------------------- Mapping vs setting
r <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating))
r+ geom_point()
#add color
r + geom_point(color=Genre)
#add color
r + geom_poin t(aex(color=Genre))
#add color
r + geom_point(aex(color=Genre))
#add color
r + geom_point(aes(color=Genre))
#2 setting
r + geom_point(color="DarkGreen")
------------------
r + geom_point(aes(siz=BudgetMillions))
------------------
r + geom_point(aes(size=BudgetMillions))
------------------
r + geom_point(aes(size=BudgetMillions))
------------------
r + geom_point(aes(size=BudgetMillions))
#------------------
r + geom_point(aes(size=BudgetMillions))
r + geom_point(size=10)
r + geom_point(aes(size=10))
#---------------- histogram
s <- ggplot(data=df, aes(x=BudgetMillions))
s +geom_histogram()
s +geom_histogram(binwidth=10)
s + geom_histogram(aes(binwidth=10))
s + geom_histogram(binwidth=10)
s + geom_histogram(binwidth=10, color="Blue")
s + geom_histogram(binwidth=5, color="Blue")
s + geom_histogram(binwidth=5, color="Blue", size=5)
s + geom_histogram(binwidth=5, color="Blue")
# add color
s + geom_histogram(binwidth=5, fill = "Green, color="Blue")
# add color
s + geom_histogram(binwidth=5, fill = "Green", color="Blue")
s + geom_histogram(binwidth=5, aes(fill=Genre))
s + geom_histogram(binwidth=5, aes(fill=Genre), color="Black")
# sometimes you may need density charts
s + geom_density(aes(fill=Genre))
# sometimes you may need density charts
s + geom_density(aes(fill=Genre), position="Stack")
# sometimes you may need density charts
s + geom_density(aes(fill=Genre), position="stack")
s + geom_boxplot()
t + geom_histogram(binwidth=10,
fill="White", color="blue")
#------------------------- layer tips
t <- ggplot(data=df, aes(x=AudienceRating))
t + geom_histogram(binwidth=10,
fill="White", color="blue")
t <- ggplot(data=df)
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White", color="Blue")
t + geom_histogram(binwidth = 10,
aes(x=BudgetMillions),
fill="White", color="Blue")
t + geom_histogram(binwidth = 10,
aes(x=CriticRating),
fill="White", color="Blue")
t <- ggplot()
#-------------------------- statistical transformation
?geom_smooth()
u <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
color=Genre))
u +geom_point() + geom_smooth()
u +geom_point() + geom_smooth(fill =NA)
u <- ggplot(data=df, aes(x=Genre, y=AudienceRating),
color=Genre)
u+geom_boxplot()
u <- ggplot(data=df, aes(x=Genre, y=AudienceRating,
color=Genre))
u+geom_boxplot()
u + geom_boxplot(size=1,2)
u + geom_boxplot(size=1.2)
u + geom_boxplot(size=1.2)  + geom_point()
# tip
u + geom_boxplot(size=1.2) +geom_jitter()
# tip
u + geom_boxplot(size=1.2) + geom_jitter()
u + geom_jitter()+ geom_boxplot(size=1.2)
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.5)
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.7)
u <- ggplot(data=df, aes(x=Genre, y=CriticRating,
color=Genre))
u+geom_boxplot()
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.7)
#------------------------- Using Facets
v <- ggplot(data=df, aes(x=BudgetMillions))
v + geom_histogram(binwidth = 10,
aes(fill=Genre))
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black")
v + geom_histogram(binwidth = 10,
aes(fill=Genre))
, color="Black"
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid()
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~.)
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~. scales="fee")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~.,scales="fee")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~., scales="free")
#scatterplots:
w <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
color=Genre))
w + geom_point(size=3) + facet_grid(Genre~.)
w + geom_point(size=3) + facet_grid(.~Year)
w + geom_point(size=3) + facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smooth() + facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year)
m <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
size=BudgetMillions, color=Genre))
m + geom_point()
m +geom_point() + xlim(50,100)
m + geom_point()
m +geom_point() + xlim(50,100)
m + geom_point()
m +geom_point() + xlim(50,100)
m +geom_point() + xlim(50,100) + ylim(50,100)
m + geom_point() + xlim(50,100) + ylim(50,100)
# won't work well always
n <- ggplot(data=df, aes(x=BudgetMillions))
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black")
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black") +
ylim(0,50)
# instead zoom!
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black") +
coord_cartesian(ylim=c(0,50))
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year) + coord_cartesian(ylim=c(0,100))
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10
aes(fill=Genre), color="black")
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10
aes(fill=Genre), color="black")
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10,
aes(fill=Genre), color="black")
h <- o + geom_histogram(binwidth=10,
aes(fill=Genre), color="black")
# label
h + xlab("Hahah!")
# label
h + xlab("Hahah!") + ylab(kikiki)
# label
h + xlab("Hahah!") + ylab("kikiki")
# label format
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30))
# label format
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30))
# tick
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20))
# tick
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
?theme
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,0.5))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(0.8,0.5))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(0.8,0.5),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!")
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=20))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=2))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue"))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue", family="Overpass"))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue", family="Courier"))
setwd()
setwd()
getwd()
?rm
?rm(list=ls())
?rm(list=ls())
rm(list=ls())
df <- read_csv(file.choose())
df <- read.csv(file.choose())
df
View(df)
install.packages(updateR)
install.packages("updateR")
install.packages("installr")
install.packages("installr")
updateR()
library("installr")
library(stringr)
1
1+1
library("installr")
q()
library(installr)
install.packages("stringr")
install.packages("stringr")
1+1
1+2
rm(list=ls())
df <- read.csv(file.choose())
getwd()
setwd("C:\\Users\\Min\\books\\R")
fin <- read.csv("P3-Future-500-The-Dataset.csv")
str(fin)
head(fin,n=10)
tail(fin,n=10)
summary(fin)
#changing from non-factor to factor
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
# factor variable trap( FVT)
a <- c("12","13","14","12","12")
typeof(a)
b <- as.numeric(a)
typeof(b)
# converting into numeric for factors
z <-  factor(c("12","13","14","12","12"))
levels(z)
y <- as.numeric(z)
######## CORRECT WAY   when yo want to change factor(numbers) into numberic, first change it into charactors
as.numeric(as.character(z))
head(fin)
str(fin)
fin$Profit
# gsub() and sub()
?sub
fin$Expenses <- gsub(" Dollars", "", fin$Expenses)
fin$Expenses <- gsub(",", "", fin$Expenses)
head(fin)
str(fin)
fin$Revenue <- gsub("\\$", "", fin$Revenue) ### $ sign need \\
fin$Revenue <- gsub(",", "", fin$Revenue)
head(fin)
str(fin)
fin$Growth <- gsub("%", "", fin$Growth) ### $ sign need \\
fin$Growth <- gsub(",", "", fin$Growth)
head(fin)
str(fin)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Growth <- as.numeric(fin$Growth)
head(fin)
str(fin)
summary(fin)
fin[!is.na(fin),]  ### ! is not!!
fin[!is.na(fin),]  ### ! is not!!
# locating missing data
complete.cases(fin) ########## check if there's na !!
fin[!complete.cases(fin),]
fin[!is.na(fin),]  ### ! is not!!
fin[is.na(fin),]  ### ! is not!!
!
fin[complete.cases(fin),]
fin[complete.cases(fin),]
fin[!complete.cases(fin),]
fin[complete.cases(fin),]
fin[!is.na(fin),]  ### ! is not!!
fin[!complete.cases(fin),]
fin[complete.cases(fin),]
fin[!is.na(fin),]  ### ! is not!!
fin ################# na and just missing value is different!!!################
fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings=c("")) ### howto fill missing char with NA!
#changing from non-factor to factor
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
# factor variable trap( FVT)
a <- c("12","13","14","12","12")
a
typeof(a)
b <- as.numeric(a)
typeof(b)
# converting into numeric for factors
z <-  factor(c("12","13","14","12","12"))
typeof(z)
levels(z)
y <- as.numeric(z)
typeof(y)
######## CORRECT WAY   when yo want to change factor(numbers) into numberic, first change it into charactors
as.numeric(as.character(z))
head(fin)
str(fin)
fin$Profit
# gsub() and sub()
?sub
fin$Expenses <- gsub(" Dollars", "", fin$Expenses)
fin$Expenses <- gsub(",", "", fin$Expenses)
head(fin)
str(fin)
fin$Revenue <- gsub("\\$", "", fin$Revenue) ### $ sign need \\
fin$Revenue <- gsub(",", "", fin$Revenue)
head(fin)
str(fin)
fin$Growth <- gsub("%", "", fin$Growth) ### $ sign need \\
fin$Growth <- gsub(",", "", fin$Growth)
head(fin)
str(fin)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Growth <- as.numeric(fin$Growth)
head(fin)
str(fin)
summary(fin)
fin[!is.na(fin),]  ### ! is not!!
fin[!is.na(fin),]  ### ! is not!!
fin[!complete.cases(fin),]
fin[complete.cases(fin),]
fin[complete.cases(fin),]
fin ################# na and just missing value is different!!!################
fin[!complete.cases(fin),]
########### which()
head(fin)
str(fin)
fin[fin$Revenue == 9746272,]
which(fin$Revenue == 9746272,)
fin[which(fin$Revenue == 9746272,),]  ### this is how to pick filtered data without grabbing NA values
head(fin)
fin[which(fin$Employees ==45),]
# is.na()
head(fin,24)
fin[fin$Expenses == NA]
fin[fin$Expenses == NA,]
fin[fin$Expenses == NA,] # you cannot compare NA with anything
is.na(fin)
a <- c(1,24,543,NA,76,45,NA)
is.na(a)
a[is.na(a)]
fin[is.na(fin$Expenses)]
fin[is.na(fin$Expenses), ]
fin[is.na(fin$Expenses),]
fin[!is.na(fin$Expenses),]
fin[is.na(fin$Expenses),]
fin[which(fin$Revenue == 9746272,),]  ### this is how to pick filtered data without grabbing NA values
?complete.cases
?complete.cases
fin[complete.cases(fin$Expenses),]
fin[!complete.cases(fin$Expenses),]
fin[!complete.cases(fin$Expenses),]
fin[is.na(fin$Expenses),]
# how to remove a row with NA
fin_backup <- fin
fin[!complete.cases(fin$Expenses),]
fin[is.na(fin$Industry)]
fin[is.na(fin$Industry),]
fin[!is.na(fin$Industry),]
fin <- fin[!is.na(fin$Industry),]
# how to reset index
rownames(fin)
# how to reset index
rownames(fin) <-1:nrow(fin)
rownames(fin) <- NULL # another way!!!!!
# how to replace missing data
fin[!complete.cases(fin),]
fin[is.na(fin$State)]
fin[is.na(fin$State),]
fin[is.na(fin$State) & fin$City == "New York",]
fin[is.na(fin$State) & fin$City == "New York", "State"]
fin[is.na(fin$State) & fin$City == "New York", "State"] <- "NY"
fin[c(11,377),]
# how to replace missing data
fin[!complete.cases(fin),]
fin[is.na(fin$State) & fin$City == "San Francisco", "State"] <- "CA"
fin[c(82,265),]
