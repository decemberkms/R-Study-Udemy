s <- ggplot(data=df, aes(x=BudgetMillions))
s +geom_histogram()
s +geom_histogram(binwidth=10)
s + geom_histogram(aes(binwidth=10))
s + geom_histogram(binwidth=10)
s + geom_histogram(binwidth=10, color="Blue")
s + geom_histogram(binwidth=5, color="Blue")
s + geom_histogram(binwidth=5, color="Blue", size=5)
s + geom_histogram(binwidth=5, color="Blue")
# add color
s + geom_histogram(binwidth=5, fill = "Green, color="Blue")
# add color
s + geom_histogram(binwidth=5, fill = "Green", color="Blue")
s + geom_histogram(binwidth=5, aes(fill=Genre))
s + geom_histogram(binwidth=5, aes(fill=Genre), color="Black")
# sometimes you may need density charts
s + geom_density(aes(fill=Genre))
# sometimes you may need density charts
s + geom_density(aes(fill=Genre), position="Stack")
# sometimes you may need density charts
s + geom_density(aes(fill=Genre), position="stack")
s + geom_boxplot()
t + geom_histogram(binwidth=10,
fill="White", color="blue")
#------------------------- layer tips
t <- ggplot(data=df, aes(x=AudienceRating))
t + geom_histogram(binwidth=10,
fill="White", color="blue")
t <- ggplot(data=df)
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White", color="Blue")
t + geom_histogram(binwidth = 10,
aes(x=BudgetMillions),
fill="White", color="Blue")
t + geom_histogram(binwidth = 10,
aes(x=CriticRating),
fill="White", color="Blue")
t <- ggplot()
#-------------------------- statistical transformation
?geom_smooth()
u <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
color=Genre))
u +geom_point() + geom_smooth()
u +geom_point() + geom_smooth(fill =NA)
u <- ggplot(data=df, aes(x=Genre, y=AudienceRating),
color=Genre)
u+geom_boxplot()
u <- ggplot(data=df, aes(x=Genre, y=AudienceRating,
color=Genre))
u+geom_boxplot()
u + geom_boxplot(size=1,2)
u + geom_boxplot(size=1.2)
u + geom_boxplot(size=1.2)  + geom_point()
# tip
u + geom_boxplot(size=1.2) +geom_jitter()
# tip
u + geom_boxplot(size=1.2) + geom_jitter()
u + geom_jitter()+ geom_boxplot(size=1.2)
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.5)
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.7)
u <- ggplot(data=df, aes(x=Genre, y=CriticRating,
color=Genre))
u+geom_boxplot()
u + geom_jitter()+ geom_boxplot(size=1.2, alpha=0.7)
#------------------------- Using Facets
v <- ggplot(data=df, aes(x=BudgetMillions))
v + geom_histogram(binwidth = 10,
aes(fill=Genre))
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black")
v + geom_histogram(binwidth = 10,
aes(fill=Genre))
, color="Black"
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid()
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~.)
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~. scales="fee")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~.,scales="fee")
# Facets
v + geom_histogram(binwidth = 10,
aes(fill=Genre), color="Black") +
facet_grid(Genre~., scales="free")
#scatterplots:
w <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
color=Genre))
w + geom_point(size=3) + facet_grid(Genre~.)
w + geom_point(size=3) + facet_grid(.~Year)
w + geom_point(size=3) + facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smooth() + facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year)
m <- ggplot(data=df, aes(x=CriticRating, y=AudienceRating,
size=BudgetMillions, color=Genre))
m + geom_point()
m +geom_point() + xlim(50,100)
m + geom_point()
m +geom_point() + xlim(50,100)
m + geom_point()
m +geom_point() + xlim(50,100)
m +geom_point() + xlim(50,100) + ylim(50,100)
m + geom_point() + xlim(50,100) + ylim(50,100)
# won't work well always
n <- ggplot(data=df, aes(x=BudgetMillions))
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black")
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black") +
ylim(0,50)
# instead zoom!
n + geom_histogram(binwidth=10, aes(fill=Genre), color="black") +
coord_cartesian(ylim=c(0,50))
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() + facet_grid(Genre~Year) + coord_cartesian(ylim=c(0,100))
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10
aes(fill=Genre), color="black")
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10
aes(fill=Genre), color="black")
#---------------- theme
o <- ggplot(data=df, aes(x=BudgetMillions))
o + geom_histogram(binwidth=10,
aes(fill=Genre), color="black")
h <- o + geom_histogram(binwidth=10,
aes(fill=Genre), color="black")
# label
h + xlab("Hahah!")
# label
h + xlab("Hahah!") + ylab(kikiki)
# label
h + xlab("Hahah!") + ylab("kikiki")
# label format
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30))
# label format
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30))
# tick
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20))
# tick
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
?theme
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,0.5))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(0.8,0.5))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(0.8,0.5),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!")
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=20))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=2))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue"))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue", family="Overpass"))
# lengend formatting
h + xlab("Hahah!") + ylab("kikiki") + ggtitle("Movie!!") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title= element_text(size=23, color="blue", family="Courier"))
setwd()
setwd()
getwd()
?rm
?rm(list=ls())
?rm(list=ls())
rm(list=ls())
df <- read_csv(file.choose())
df <- read.csv(file.choose())
df
View(df)
install.packages(updateR)
install.packages("updateR")
install.packages("installr")
install.packages("installr")
updateR()
library("installr")
library(stringr)
1
1+1
library("installr")
q()
library(installr)
install.packages("stringr")
install.packages("stringr")
# what is apply ?
?apply()
rm(list = ls())
getwd()
setwd("C:\\Users\\Min\\books")
setwd(".\\R_start")
# read data
Chicago <- read.csv("Chicago-F.csv", row.names=1)
NewYork <- read.csv("NewYork-F.csv", row.names=1)
Houston <- read.csv("Houston-F.csv", row.names=1)
SanFrancisco <- read.csv("SanFrancisco-F.csv", row.names=1)
Chicago
NewYork
Houston
SanFrancisco
is.data.frame(SanFrancisco)
#let's convert to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
is.matric(SanFrancisco)
# let's put all of these into a list
Weather <- list(Chicago=Chicago, NewYork=NewYork, Houston=Houston, SanFrancisco=SanFrancisco)
Weather
#let's try it out
Weather[3]
Weather[[3]]
Weather$Houston
apply(Weather$Houston,1,mean) # row
apply(Weather$Houston,1,max)
apply(Weather$Houston,2,max) # column
# The apply family
## apply - use on a matrix : either the rows or the columns
## tapply - use on a vector to extract subgroups and apply a function to them
## by - use on data frames. Same concepts as in group by in SQL
## eapply -use on a environment(E)
## lapply - apply a fuction to elemernts of a list(L)
## sapply - a version of lapply. Can simplify (S) the result so it's not presetned as a list
## vapply - has a pre-specified type of return value(V)
## replicate -run a fuction several times. Usually with generation of random value
## mapply -multivariate Versiob of sapply
## rapply - recursive version opf lapply
# what is apply ?
?apply()
apply(Chicago,)
apply(Chicago, 1, sum)
apply(Chicago, 1, mean)
apply(Chicago, 1, mean)
#check
mean(Chicago["DaysWithPrecip",])
Chicago["DaysWithPrecip",]
Chicago
Chicago
mean(Chicago["DaysWithPrecip",])
apply(Chicago, 1, mean)
#analyze one city
Chicago
apply(Chicago, 1, max)
apply(Chicago, 1, min)
#for practice:
apply(Chicago, 2, max)
apply(Chicago, 2, max)
apply(Chicago, 2, min)
apply(Chicago, 1, max)
#Compare
apply(Chicago, 1, mean)
apply(NewYork, 1, mean)
apply(Houston, 1, mean)
apply(SanFrancisco, 1, mean)
#---------------- loop instead of apply
Chicago
mean(Chicago[1,])
mean(Chicago[i,])
output[i] <-mean(Chicago[i,])
for(i in 1:5){
output[i] <-mean(Chicago[i,])
}
for (i in 1:5){
output[i] <-mean(Chicago[i,])
}
# find the mean of every row
# 1. via loo
output <- NULL #preparing an empty vector
for (i in 1:5){
output[i] <-mean(Chicago[i,])
}
rm(list = ls())
getwd()
setwd("C:\\Users\\Min\\books")
setwd(".\\R_start")
# read data
Chicago <- read.csv("Chicago-F.csv", row.names=1)
NewYork <- read.csv("NewYork-F.csv", row.names=1)
Houston <- read.csv("Houston-F.csv", row.names=1)
SanFrancisco <- read.csv("SanFrancisco-F.csv", row.names=1)
Chicago
NewYork
Houston
SanFrancisco
is.data.frame(SanFrancisco)
#let's convert to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
is.matric(SanFrancisco)
# let's put all of these into a list
Weather <- list(Chicago=Chicago, NewYork=NewYork, Houston=Houston, SanFrancisco=SanFrancisco)
Weather
#let's try it out
Weather[3]
Weather[[3]]
Weather$Houston
apply(Weather$Houston,1,mean) # row
apply(Weather$Houston,1,max)
apply(Weather$Houston,2,max) # column
# The apply family
## apply - use on a matrix : either the rows or the columns
## tapply - use on a vector to extract subgroups and apply a function to them
## by - use on data frames. Same concepts as in group by in SQL
## eapply -use on a environment(E)
## lapply - apply a fuction to elemernts of a list(L)
## sapply - a version of lapply. Can simplify (S) the result so it's not presetned as a list
## vapply - has a pre-specified type of return value(V)
## replicate -run a fuction several times. Usually with generation of random value
## mapply -multivariate Versiob of sapply
## rapply - recursive version opf lapply
# what is apply ?
?apply()
Chicago
apply(Chicago, 1, mean)
#check
Chicago["DaysWithPrecip",]
mean(Chicago["DaysWithPrecip",])
#analyze one city
Chicago
apply(Chicago, 1, max)
apply(Chicago, 1, min)
#for practice:
apply(Chicago, 2, max)
apply(Chicago, 2, min)
#Compare
apply(Chicago, 1, mean)
apply(NewYork, 1, mean)
apply(Houston, 1, mean)
apply(SanFrancisco, 1, mean)
#---------------- loop instead of apply
Chicago
# find the mean of every row
# 1. via loo
output[i] <-mean(Chicago[i,])
mean(Chicago[i,])
for (i in 1:5){
mean(Chicago[i,])
}
# find the mean of every row
# 1. via loo
output <- NULL #preparing an empty vector
for (i in 1:5){
mean(Chicago[i,])
}
output
output[i] <- mean(Chicago[i,])
output
# find the mean of every row
# 1. via loo
output <- NULL #preparing an empty vector
for (i in 1:5){
output[i] <- mean(Chicago[i,])
}
output
names(output) <- rownames(Chicago)
output
# 2. via apply
apply(Chicago, 1, mean)
#------------------- lapply
Chicago
t(Chicago)
?t
Weather
lapply
?lapply
lapply(Wather,t)
lapply(Weather,t)
mynewlist <- lapply(Weather,t)
lapply(Weather, rbind, NewRow=1:12)
#ex3
?rowMeans
rowMeans(Chicago)
lapply(Weatehr, rowMeans)
lapply(Weatehr, rowMeans)
lapply(Weatehr, rowMeans)
lapply(Weather, rowMeans)
lapply(Weather, colMeans)
lapply(Weather, rowsum)
lapply(Weather, rowSums)
lapply(Weather, colSums)
